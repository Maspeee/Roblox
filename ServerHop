--	Services  ------------------------------------
--------------------------------------------------

local TpS = game:GetService("TeleportService")
local Http = game:GetService("HttpService")

--	Variables ------------------------------------
--------------------------------------------------

local placeId = game.PlaceId
local jobId = game.JobId
local api = "https://games.roblox.com/v1/games/" ..placeId .."/servers/Public?sortOrder=Desc&limit=100"
local cursor = nil
local queued = false

--	Functions  -----------------------------------
--------------------------------------------------

function listServers()	
	cursor = if cursor then "&cursor=" ..cursor else ""
	local servers = Http:JSONDecode(game:HttpGet(api ..cursor))
	
	while not servers.data do		print("cooldown")
		task.wait(5)
		servers = Http:JSONDecode(game:HttpGet(api ..cursor))
	end
	
	return servers
end

function hopFuncCalled(queueLink, maxPing, freeSlots) print("Hopping")
	maxPing = maxPing or 2000
	freeSlots = freeSlots or 0
	local success
	
	if not queued and queueLink then
		queued = true
		queue_on_teleport(game:HttpGet(queueLink))
	end
	
	repeat
		local servers = listServers()
		
		for _, s in ipairs(servers.data) do
			if s.playing +freeSlots >= s.maxPlayers then continue end
			if s.id == jobId then continue end
			if s.ping >= maxPing then continue end
			
			_G.isTeleporting = true
			success = pcall(TpS.TeleportToPlaceInstance, TpS, placeId, s.id)
			if success then break end
		end
		
		cursor = servers.nextPageCursor
	until success
	
	TpS.TeleportInitFailed:Wait()
	hopFuncCalled(queueLink, maxPing, freeSlots)
end

--	Main  ----------------------------------------
--------------------------------------------------

return hopFuncCalled
